// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	event.proto

It has these top-level messages:
	Event
	Delivery
	Location
*/
package event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Latitude  int32  `protobuf:"varint,2,opt,name=latitude" json:"latitude,omitempty"`
	Longitude int32  `protobuf:"varint,3,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetLatitude() int32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Event) GetLongitude() int32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type Delivery struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *Delivery) Reset()                    { *m = Delivery{} }
func (m *Delivery) String() string            { return proto.CompactTextString(m) }
func (*Delivery) ProtoMessage()               {}
func (*Delivery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Delivery) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type Location struct {
	Latitude  int32 `protobuf:"varint,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude int32 `protobuf:"varint,2,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Location) GetLatitude() int32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() int32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func init() {
	proto.RegisterType((*Event)(nil), "event.Event")
	proto.RegisterType((*Delivery)(nil), "event.Delivery")
	proto.RegisterType((*Location)(nil), "event.Location")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventProtos service

type EventProtosClient interface {
	SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Delivery, error)
	// Sent current loation and get stream of events
	GetEvents(ctx context.Context, in *Location, opts ...grpc.CallOption) (EventProtos_GetEventsClient, error)
}

type eventProtosClient struct {
	cc *grpc.ClientConn
}

func NewEventProtosClient(cc *grpc.ClientConn) EventProtosClient {
	return &eventProtosClient{cc}
}

func (c *eventProtosClient) SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Delivery, error) {
	out := new(Delivery)
	err := grpc.Invoke(ctx, "/event.EventProtos/SendEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProtosClient) GetEvents(ctx context.Context, in *Location, opts ...grpc.CallOption) (EventProtos_GetEventsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EventProtos_serviceDesc.Streams[0], c.cc, "/event.EventProtos/GetEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventProtosGetEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventProtos_GetEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventProtosGetEventsClient struct {
	grpc.ClientStream
}

func (x *eventProtosGetEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EventProtos service

type EventProtosServer interface {
	SendEvent(context.Context, *Event) (*Delivery, error)
	// Sent current loation and get stream of events
	GetEvents(*Location, EventProtos_GetEventsServer) error
}

func RegisterEventProtosServer(s *grpc.Server, srv EventProtosServer) {
	s.RegisterService(&_EventProtos_serviceDesc, srv)
}

func _EventProtos_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProtosServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventProtos/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProtosServer).SendEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProtos_GetEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Location)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventProtosServer).GetEvents(m, &eventProtosGetEventsServer{stream})
}

type EventProtos_GetEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventProtosGetEventsServer struct {
	grpc.ServerStream
}

func (x *eventProtosGetEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _EventProtos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventProtos",
	HandlerType: (*EventProtosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEvent",
			Handler:    _EventProtos_SendEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEvents",
			Handler:       _EventProtos_GetEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "event.proto",
}

func init() { proto.RegisterFile("event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2d, 0x4b, 0xcd,
	0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x42, 0xb9, 0x58, 0x5d,
	0x41, 0x0c, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x30, 0x5b, 0x48, 0x8a, 0x8b, 0x23, 0x27, 0xb1, 0x24, 0xb3, 0xa4, 0x34, 0x25, 0x55, 0x82,
	0x49, 0x81, 0x51, 0x83, 0x35, 0x08, 0xce, 0x17, 0x92, 0xe1, 0xe2, 0xcc, 0xc9, 0xcf, 0x4b, 0x87,
	0x48, 0x32, 0x83, 0x25, 0x11, 0x02, 0x4a, 0x4a, 0x5c, 0x1c, 0x2e, 0xa9, 0x39, 0x99, 0x65, 0xa9,
	0x45, 0x95, 0x42, 0x62, 0x5c, 0x6c, 0xc5, 0x25, 0x89, 0x25, 0xa5, 0xc5, 0x50, 0xb3, 0xa1, 0x3c,
	0x25, 0x17, 0x2e, 0x0e, 0x9f, 0xfc, 0xe4, 0xc4, 0x92, 0xcc, 0xfc, 0x3c, 0x14, 0x9b, 0x18, 0xf1,
	0xd9, 0xc4, 0x84, 0x66, 0x93, 0x51, 0x36, 0x17, 0x37, 0xd8, 0x03, 0x01, 0x20, 0x5f, 0x15, 0x0b,
	0xe9, 0x70, 0x71, 0x06, 0xa7, 0xe6, 0xa5, 0x40, 0xfc, 0xc4, 0xa3, 0x07, 0xf1, 0x31, 0x98, 0x27,
	0xc5, 0x0f, 0xe5, 0xc1, 0x1c, 0xa6, 0xc4, 0x20, 0xa4, 0xc7, 0xc5, 0xe9, 0x9e, 0x5a, 0x02, 0x96,
	0x2e, 0x16, 0x82, 0xc9, 0xc3, 0x1c, 0x25, 0x85, 0xa2, 0x5d, 0x89, 0xc1, 0x80, 0xd1, 0x49, 0x96,
	0x8b, 0x2f, 0x39, 0x3f, 0x57, 0x2f, 0x23, 0xb5, 0x28, 0x15, 0x22, 0xe7, 0x84, 0x6c, 0x79, 0x12,
	0x1b, 0x38, 0x68, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x14, 0xb6, 0xba, 0x81, 0x69, 0x01,
	0x00, 0x00,
}
